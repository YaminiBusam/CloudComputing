Vehicle to Edge:
import java.util.PriorityQueue;

class req implements Comparable<req> {
    private boolean highpriority;
    private String Cont;//content
    private long Arrivaltime;
    private int VehicleId;

    public req(boolean highpriority, String Cont, long Arrivaltime, int VehicleId) {
        this.highpriority = highpriority;
        this.Cont = Cont;
        this.Arrivaltime = Arrivaltime;
        this.VehicleId = VehicleId;
    }

    public boolean highpriority() {
        return highpriority;
    }

    public String getContent() {
        return Cont;
    }

    public long getArrivalTime() {
        return Arrivaltime;
    }

    public int getVehicleId() {
        return VehicleId;
    }

    @Override
    public int compareTo(req other) {
        if (this.highpriority() && !other.highpriority()) {
            return -1; // High Priority
        } else if (!this.highpriority() && other.highpriority()) {
            return 1; // Other req high priority
        } else {
            // Both requests have the same priority
            return Long.compare(this.Arrivaltime, other.Arrivaltime);
        }
    }
}

class Edge {
    private PriorityQueue<req> requestQueue;

    public Edge() {
        requestQueue = new PriorityQueue<>();
    }

    public void ProcessRequest(req req) {
        long startTime = System.currentTimeMillis();
        System.out.println("Processing req from vehicle " + req.getVehicleId() + ": " + req.getContent() + " with priority " + (req.highpriority() ? "high" : "low"));
        // Simulate processing time
        try {
            Thread.sleep(100); // Simulate processing time of 100 millisecond
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        long endTime = System.currentTimeMillis();
        long responseTime = endTime - startTime;
        System.out.println("Response time for req from vehicle " + req.getVehicleId() + ": " + req.getContent() + " is " + responseTime + " milliseconds");
    }

    public void addReq(req req) {
        requestQueue.add(req);
    }

    public boolean hasReq() {
        return !requestQueue.isEmpty();
    }

    public req getNextReq() {
        return requestQueue.poll();
    }
}

public class Main {
    public static void main(String[] args) {
        Edge edgeServer = new Edge();

        // Simulate incoming requests from vehicles
        int VehicleId = 1;
        for (int i = 0; i < 9; i++) { // Simulate 9 vehicles
            for (int j = 0; j < 25; j++) { // Simulate 25 requests per vehicle
                boolean highpriority = Math.random() < 0.5; // Randomly assign high or low priority
                String Cont = "req " + (j + 1) + " from vehicle " + VehicleId;
                long Arrivaltime = System.currentTimeMillis(); // Record arrival time
                req req = new req(highpriority, Cont, Arrivaltime, VehicleId);
                edgeServer.addReq(req);
            }
            VehicleId++; // vehicle ID for each vehicle increment
        }

        // Processing requests based on priorities
        while (edgeServer.hasReq()) {
            req req = edgeServer.getNextReq();
            edgeServer.ProcessRequest(req);
        }
    }
}


Edge to cloud:


//Edges to Cloud
import java.util.PriorityQueue;

class Req {
    int Priority;
    String Region;

    public Req(int Priority, String Region) {
        this.Priority = Priority;
        this.Region = Region;
    }
}

class Edges {
    int avail;
    int space;
    PriorityQueue<Req> requests;
    long cloudResponseTime;

    public Edges(int avail) {
        this.avail = avail;
        this.space = 0;
        this.requests = new PriorityQueue<>((r1, r2) -> r2.Priority - r1.Priority); // Higher Priority first
        this.cloudResponseTime = 0;
    }

    public void addReq(Req request) {
        if (space < avail) {
            requests.add(request);
            space++;
        } else {
            // Redirect to cloud with longer response time
            long startTime = System.nanoTime();
            System.out.println("Redirecting request to cloud, Edges: " + request.Region + ", Priority: " + request.Priority);
            long endTime = System.nanoTime();
            long responseTime = (long) (endTime - startTime + Math.random() * 1000000); // Simulating longer response time
            System.out.println("Response time from cloud: " + responseTime + " nanoseconds");
            // Update cloud response time
            cloudResponseTime += responseTime;
            // Decrease space on edge
            space--;
        }
    }

    public void processReq() {
        // Process requests based on Priority
        for (int Priority = 1; Priority >= 0; Priority--) { // Changed to 1 for high Priority, 0 for low Priority
            while (!requests.isEmpty() && requests.peek().Priority == Priority) {
                Req request = requests.poll();
                System.out.println("Processing request from edge: " + request.Region + ", Priority: " + request.Priority);
                long startTime = System.nanoTime();
                // Simulating processing time
                try {
                    Thread.sleep((long) (Math.random() * 100)); // Simulating processing time between 0 and 100 milliseconds
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                long endTime = System.nanoTime();
                long responseTime = endTime - startTime;
                System.out.println("Response time for processing: " + responseTime + " nanoseconds");
                // Update cloud response time
                cloudResponseTime += responseTime;
                // Decrease space on edge
                space--;
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Edges[] edges = new Edges[9];
        for (int i = 0; i < 9; i++) {
            edges[i] = new Edges(25);
        }

        // Add 25 requests from each edge server to the cloud
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 25; j++) {
                int Priority = j % 2; // Only two Priority levels: 0 (low) and 1 (high)
                edges[i].addReq(new Req(Priority, "Region" + (i + 1)));
            }
        }

        // Process requests for each edge
        for (Edges edge : edges) {
            edge.processReq();
        }

        // Calculate average cloud response time
        long totalRespTime = 0;
        for (Edges edge : edges) {
            totalRespTime += edge.cloudResponseTime;
        }
        long avgCloudRespTime = totalRespTime / 225; // Total requests = 225 (9 edges * 25 requests per edge)
        System.out.println("Average cloud response time: " + avgCloudRespTime + " nanoseconds");
    }
}


Edge to Fog: 

import java.util.PriorityQueue;
import java.util.concurrent.ConcurrentHashMap;

class Request {
    int Priority;
    String region;

    public Request(int Priority, String region) {
        this.Priority = Priority;
        this.region = region;
    }
}

class Edge {
    int Capacity;
    int Load;
    ConcurrentHashMap<String, PriorityQueue<Request>> reqs;
    ConcurrentHashMap<String, Long> fogRespTime;

    public Edge(int Capacity) {
        this.Capacity = Capacity;
        this.Load = 0;
        this.reqs = new ConcurrentHashMap<>();
        this.fogRespTime = new ConcurrentHashMap<>();
        // Initializing the region and fog nodes
        for (int i = 0; i < 9; i++) {
            String region = "region" + i;
            reqs.put(region, new PriorityQueue<>((r1, r2) -> r2.Priority - r1.Priority)); // Higher Priority first
            if (i < 3) {
                String fogNode = "fog" + (i + 1); // Fog nodes are fog1, fog2, fog3
                reqs.put(fogNode, new PriorityQueue<>((r1, r2) -> r2.Priority - r1.Priority)); // Higher Priority first
                fogRespTime.put(fogNode, 0L);
            }
        }
    }

    public void addReq(Request request) {
        if (Load < Capacity) {
            reqs.get(request.region).add(request);
            Load++;
        } else {
            // Redirecting fog node with min resp time
            String fogNode = findAvailNode(request.Priority);
            if (fogNode != null) {
                long startTime = System.nanoTime();
                System.out.println("Redirecting request to fog node: " + fogNode + ", Priority: " + request.Priority);
                long endTime = System.nanoTime();
                long respTime = endTime - startTime;
                System.out.println("Response time from fog node: " + respTime + " nanoseconds");
                // -- Load on edge
                Load--;
                // Updating the fog resp time
                fogRespTime.put(fogNode, fogRespTime.get(fogNode) + respTime);
            } else {
                System.out.println("Edge is at full Capacity and no fog node available. Cannot process request.");
            }
        }
    }

    private String findAvailNode(int Priority) {
        // Simulating the fog node with min resp time
        String minFog = null;
        long minRespTime = Long.MAX_VALUE;

        for (String fogNode : reqs.keySet()) {
            if (fogNode.startsWith("fog") && fogRespTime.get(fogNode) < minRespTime) {
                minRespTime = fogRespTime.get(fogNode);
                minFog = fogNode;
            }
        }
        return minFog;
    }

    public void processReq() {
        // Processing the request based on Priority
        for (int Priority = 1; Priority >= 0; Priority--) { // Changed to 1 for high Priority, 0 for low Priority
            synchronized (reqs) {
                for (PriorityQueue<Request> queue : reqs.values()) {
                    while (!queue.isEmpty() && queue.peek().Priority == Priority) {
                        Request request = queue.poll();
                        System.out.println("Processing request: " + request.region + ", Priority: " + request.Priority +
                                ", Processing on fog node: " + getFogs(request.region));
                        long startTime = System.nanoTime();
                        // Simulating the processing time
                        try {
                            Thread.sleep((long) (Math.random() * 100)); // Simulating processing time between 0 and 100 milliseconds
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        long endTime = System.nanoTime();
                        long respTime = endTime - startTime;
                        System.out.println("Response time for processing: " + respTime + " nanoseconds");
                        // Updating the  fog resp time
                        fogRespTime.put(getFogs(request.region), fogRespTime.get(getFogs(request.region)) + respTime);
                        Load--;
                    }
                }
            }
        }
    }

    private String getFogs(String region) {
        return region.startsWith("region") ? "fog" + (Integer.parseInt(region.substring(6)) / 3 + 1) : null;
    }
}
//Main class
public class Main {
    public static void main(String[] args) {
        Edge[] edges = new Edge[9];
        for (int i = 0; i < 9; i++) {
            edges[i] = new Edge(25);
        }

        for (int i = 0; i < 75; i++) {
            // Add reqs with different priority
            int Priority = i % 2; // Only two Priority levels: 0 (low) and 1 (high)
            if (i < 25) {
                edges[0].addReq(new Request(Priority, "region0"));
                edges[1].addReq(new Request(Priority, "region1"));
                edges[2].addReq(new Request(Priority, "region2"));
            } else if (i < 50) {
                edges[3].addReq(new Request(Priority, "region3"));
                edges[4].addReq(new Request(Priority, "region4"));
                edges[5].addReq(new Request(Priority, "region5"));
            } else {
                edges[6].addReq(new Request(Priority, "region6"));
                edges[7].addReq(new Request(Priority, "region7"));
                edges[8].addReq(new Request(Priority, "region8"));
            }
        }

        for (Edge edge : edges) {
            edge.processReq();
        }
    }
}

----------------------------
Edge to Edge:
import java.util.PriorityQueue;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;
class Request implements Comparable&lt;Request&gt; {
private int id;
private int pt; //priority
private long resTime;//response time
public Request(int id, int pt) {
this.id = id;
this.pt = pt;
}
public int getId() {
return id;
}
public int getPriority() {
return pt;
}
public long getResponseTime() {
return resTime;
}
public void setResponseTime(long resTime) {
this.resTime = resTime;
}
@Override

public int compareTo(Request other) {
return Integer.compare(other.pt, this.pt); // Higher priority first
}
}
class EdgeServer {
private int id;
private AtomicInteger currentLoad = new AtomicInteger(0);
private final int capacity;
private Random rand = new Random();
public EdgeServer(int id, int capacity) {
this.id = id;
this.capacity = capacity;
}
public boolean tryProcessRequest(Request request, int originatingEdgeId) {
if (currentLoad.get() &lt; capacity) {
currentLoad.incrementAndGet();
long resTime = generateResponseTime();
request.setResponseTime(resTime);
System.out.println(&quot;Request &quot; + request.getId() + &quot; processed at Edge &quot; + id +
&quot; (originating from Edge &quot; + originatingEdgeId + &quot;) with priority &quot; +
request.getPriority() + &quot; and response time &quot; + resTime + &quot; ms&quot;);
currentLoad.decrementAndGet();
return true;
} else {
System.out.println(&quot;Edge &quot; + id + &quot; is full. Request &quot; + request.getId() +
&quot; originating from Edge &quot; + originatingEdgeId + &quot; cannot be processed.&quot;);
return false;
}
}
private long generateResponseTime() {
// Simulating varying response time
return 50 + rand.nextInt(151); // Response time between 50ms to 200ms
}
}
public class Main2 {
public static void main(String[] args) {
final int num_edge= 9;// Number Of Edge Servers
final int servercapacity = 25;// capacity per server
final int num_reqts = 225;//number of requests

EdgeServer[] edgeServers = new EdgeServer[num_edge];
for (int i = 0; i &lt; num_edge; i++) {
edgeServers[i] = new EdgeServer(i + 1, servercapacity);
}
PriorityQueue&lt;Request&gt; requestQueue = new PriorityQueue&lt;&gt;();
Random rand = new Random();
for (int i = 1; i &lt;= num_reqts; i++) {
int pt = (i &lt;= 108) ? 1 : 0;
requestQueue.add(new Request(i, pt)); //priority-pt
}
ExecutorService executor = Executors.newFixedThreadPool(num_edge);
while (!requestQueue.isEmpty()) {
Request request = requestQueue.poll();
executor.submit(() -&gt; {
int startIndex = rand.nextInt(num_edge); // Randomize start index
boolean processed = false;
for (int i = 0; i &lt; num_edge; i++) {
int index = (startIndex + i) % num_edge;
if (edgeServers[index].tryProcessRequest(request, index + 1)) {
processed = true;
break;
}
}
if (!processed) {
System.out.println(&quot;All edge servers are full. Unable to process request &quot; + request.getId());
}
});
}
executor.shutdown();
}
}

-------------------------------------
Edge to edge -When one server is full
import java.util.PriorityQueue;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;
lass Request implements Comparable&lt;Request&gt; {
private int id;
private int pt;
private long resTime;
public Request(int id, int pt) {
this.id = id;
this.pt = pt;
}
public int getId() {
return id;
}
public int getPriority() {
return pt;
}
public long getResponseTime() {
return resTime;
}
public void setResponseTime(long resTime) {
this.resTime = resTime;
}
@Override
public int compareTo(Request other) {
return Integer.compare(other.pt, this.pt); // Higher priority first
}
}
class EdgeServer {
private int id;
private AtomicInteger currentLoad = new AtomicInteger(0);
private final int capacity;
private Random rand = new Random();
public EdgeServer(int id, int capacity, boolean initializeFull) {
this.id = id;
this.capacity = capacity;
if (initializeFull) {
this.currentLoad.set(capacity); // Initialize as full
}

}
public boolean tryProcessRequest(Request request, int originatingEdgeId) {
if (currentLoad.get() &lt; capacity) {
currentLoad.incrementAndGet();
long resTime = generateResponseTime();
request.setResponseTime(resTime);
System.out.println(&quot;Request &quot; + request.getId() + &quot; processed at Edge &quot; + id +
&quot; (originating from Edge &quot; + originatingEdgeId + &quot;) with priority &quot; +
request.getPriority() + &quot; and response time &quot; + resTime + &quot; ms&quot;);
currentLoad.decrementAndGet();
return true;
} else {
System.out.println(&quot;Edge &quot; + id + &quot; is full. Request &quot; + request.getId() +
&quot; originating from Edge &quot; + originatingEdgeId + &quot; cannot be processed.&quot;);
return false;
}
}
private long generateResponseTime() {
// Simulating varying response time
return 50 + rand.nextInt(151); // Response time between 50ms to 200ms
}
}
public class Main2 {
public static void main(String[] args) {
final int num_edge= 9;// Number of Edge Servers
final int servercapacity = 25;// capacity per server
final int num_reqts = 225;//number of requests
EdgeServer[] edgeServers = new EdgeServer[num_edge];
for (int i = 0; i &lt; num_edge; i++) {
boolean initializeFull = (i == 2); // Initialize only Edge Server 3 as full
edgeServers[i] = new EdgeServer(i + 1, servercapacity, initializeFull);
}
PriorityQueue&lt;Request&gt; requestQueue = new PriorityQueue&lt;&gt;();
Random rand = new Random();
for (int i = 1; i &lt;= num_reqts; i++) {
int priority = (i &lt;= 108) ? 1 : 0;
requestQueue.add(new Request(i, priority));
}

ExecutorService executor = Executors.newFixedThreadPool(num_edge);
while (!requestQueue.isEmpty()) {
Request request = requestQueue.poll();
executor.submit(() -&gt; {
int startIndex = rand.nextInt(num_edge); // Randomize start index
boolean processed = false;
for (int i = 0; i &lt; num_edge; i++) {
int index = (startIndex + i) % num_edge;
if (edgeServers[index].tryProcessRequest(request, index + 1)) {
processed = true;
break;
}
}
if (!processed) {
System.out.println(&quot;All edge servers are full. Unable to process request &quot; + request.getId());
}
});
}
executor.shutdown();
}
}



---------------
Reference:
https://www.w3schools.com/java/default.asp
https://www.geeksforgeeks.org/this-reference-in-java/?ref=lbp
https://www.geeksforgeeks.org/priority-queue-class-in-java/
https://www.geeksforgeeks.org/java-lang-thread-class-java/
https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ExecutorService.html
https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html
